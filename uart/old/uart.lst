   1               		.file	"uart.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	uart_init
  12               	uart_init:
  13               	.LFB5:
  14               		.file 1 "uart/old/uart.c"
   1:uart/old/uart.c **** 
   2:uart/old/uart.c **** #include "uart.h"
   3:uart/old/uart.c **** 
   4:uart/old/uart.c **** volatile uint8_t gu8Buf_size = 0;
   5:uart/old/uart.c **** volatile uint8_t gu8Buf_idx = 0;
   6:uart/old/uart.c **** volatile uint8_t gu8Main_buf[MAX_UART_BUF_SIZE] = {0};
   7:uart/old/uart.c **** volatile uint8_t gu8Aux_buf[MAX_UART_BUF_SIZE] = {0};
   8:uart/old/uart.c **** volatile uint8_t gu8Command_ready = 0;
   9:uart/old/uart.c **** 
  10:uart/old/uart.c **** void uart_init(uint16_t baud)
  11:uart/old/uart.c **** {
  15               		.loc 1 11 0
  16               		.cfi_startproc
  17               	.LVL0:
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  22 0000 9C01      		movw r18,r24
  12:uart/old/uart.c **** 	uint16_t baudValue = ((((F_CPU/16UL) + (baud/2)) / (baud)) - 1);
  23               		.loc 1 12 0
  24 0002 BC01      		movw r22,r24
  25 0004 7695      		lsr r23
  26 0006 6795      		ror r22
  27               	.LVL1:
  28 0008 CB01      		movw r24,r22
  29 000a A0E0      		ldi r26,0
  30 000c B0E0      		ldi r27,0
  31 000e BC01      		movw r22,r24
  32 0010 CD01      		movw r24,r26
  33 0012 605C      		subi r22,-64
  34 0014 7D4B      		sbci r23,-67
  35 0016 804F      		sbci r24,-16
  36 0018 9F4F      		sbci r25,-1
  37 001a 40E0      		ldi r20,0
  38 001c 50E0      		ldi r21,0
  39 001e 0E94 0000 		call __udivmodsi4
  40               	.LVL2:
  41 0022 2150      		subi r18,1
  42 0024 3109      		sbc r19,__zero_reg__
  43               	.LVL3:
  13:uart/old/uart.c **** 	UCSRC &= ~(1<<7);
  44               		.loc 1 13 0
  45 0026 80B5      		in r24,0x20
  46 0028 8F77      		andi r24,lo8(127)
  47 002a 80BD      		out 0x20,r24
  14:uart/old/uart.c **** 	UBRRH = (uint8_t) (baudValue >> 8);
  48               		.loc 1 14 0
  49 002c 30BD      		out 0x20,r19
  15:uart/old/uart.c **** 	UBRRL = (uint8_t) baudValue;
  50               		.loc 1 15 0
  51 002e 29B9      		out 0x9,r18
  16:uart/old/uart.c **** 	UCSRC |= (1<<7) | (3<<1);
  52               		.loc 1 16 0
  53 0030 80B5      		in r24,0x20
  54 0032 8668      		ori r24,lo8(-122)
  55 0034 80BD      		out 0x20,r24
  17:uart/old/uart.c **** 	UCSRB |= (3<<3);		
  56               		.loc 1 17 0
  57 0036 8AB1      		in r24,0xa
  58 0038 8861      		ori r24,lo8(24)
  59 003a 8AB9      		out 0xa,r24
  18:uart/old/uart.c **** 	//if(mode == 'd'|| mode=='D')
  19:uart/old/uart.c **** 		//UCSRA |= (1<<1);
  20:uart/old/uart.c **** 	//else
  21:uart/old/uart.c **** 		//UCSRA &= ~(1<<1);
  22:uart/old/uart.c **** 		
  23:uart/old/uart.c **** 	#ifdef INTE
  24:uart/old/uart.c **** 	UCSRB |= (1<<7);		// interrupts enabled on receive only
  60               		.loc 1 24 0
  61 003c 579A      		sbi 0xa,7
  25:uart/old/uart.c **** 	sei();
  62               		.loc 1 25 0
  63               	/* #APP */
  64               	 ;  25 "uart/old/uart.c" 1
  65 003e 7894      		sei
  66               	 ;  0 "" 2
  67               	/* #NOAPP */
  68 0040 0895      		ret
  69               		.cfi_endproc
  70               	.LFE5:
  72               	.global	uart_send_ready
  74               	uart_send_ready:
  75               	.LFB6:
  26:uart/old/uart.c **** 	#endif
  27:uart/old/uart.c **** 	//memset( (void *) &gu8Main_buf[0], 0, MAX_UART_BUF_SIZE); 
  28:uart/old/uart.c **** }
  29:uart/old/uart.c **** 
  30:uart/old/uart.c **** uint8_t uart_send_ready(void)
  31:uart/old/uart.c **** {
  76               		.loc 1 31 0
  77               		.cfi_startproc
  78               	/* prologue: function */
  79               	/* frame size = 0 */
  80               	/* stack size = 0 */
  81               	.L__stack_usage = 0
  32:uart/old/uart.c **** 	if(UCSRA & (1<<5))
  82               		.loc 1 32 0
  83 0042 8BB1      		in r24,0xb
  33:uart/old/uart.c **** 		return 1;
  34:uart/old/uart.c **** 	else
  35:uart/old/uart.c **** 		return 0;
  36:uart/old/uart.c **** }
  84               		.loc 1 36 0
  85 0044 85FB      		bst r24,5
  86 0046 8827      		clr r24
  87 0048 80F9      		bld r24,0
  88 004a 0895      		ret
  89               		.cfi_endproc
  90               	.LFE6:
  92               	.global	uart_receive_ready
  94               	uart_receive_ready:
  95               	.LFB7:
  37:uart/old/uart.c **** 
  38:uart/old/uart.c **** uint8_t uart_receive_ready(void)
  39:uart/old/uart.c **** {
  96               		.loc 1 39 0
  97               		.cfi_startproc
  98               	/* prologue: function */
  99               	/* frame size = 0 */
 100               	/* stack size = 0 */
 101               	.L__stack_usage = 0
  40:uart/old/uart.c **** 	if(UCSRA & (1<<7))
 102               		.loc 1 40 0
 103 004c 8BB1      		in r24,0xb
  41:uart/old/uart.c **** 		return 1;
  42:uart/old/uart.c **** 	else
  43:uart/old/uart.c **** 		return 0;
  44:uart/old/uart.c **** }
 104               		.loc 1 44 0
 105 004e 881F      		rol r24
 106 0050 8827      		clr r24
 107 0052 881F      		rol r24
 108 0054 0895      		ret
 109               		.cfi_endproc
 110               	.LFE7:
 112               	.global	uart_send_u8
 114               	uart_send_u8:
 115               	.LFB8:
  45:uart/old/uart.c **** 
  46:uart/old/uart.c **** 
  47:uart/old/uart.c **** void uart_send_u8(uint8_t u8data)
  48:uart/old/uart.c **** {
 116               		.loc 1 48 0
 117               		.cfi_startproc
 118               	/* prologue: function */
 119               	/* frame size = 0 */
 120               	/* stack size = 0 */
 121               	.L__stack_usage = 0
 122               	.LVL4:
 123               	.L5:
  49:uart/old/uart.c **** 	while(!(UCSRA & (1<<5)));
 124               		.loc 1 49 0 discriminator 1
 125 0056 5D9B      		sbis 0xb,5
 126 0058 00C0      		rjmp .L5
  50:uart/old/uart.c **** 	UDR = u8data;
 127               		.loc 1 50 0
 128 005a 8CB9      		out 0xc,r24
 129 005c 0895      		ret
 130               		.cfi_endproc
 131               	.LFE8:
 133               	.global	uart_sendString
 135               	uart_sendString:
 136               	.LFB9:
  51:uart/old/uart.c **** }
  52:uart/old/uart.c **** 
  53:uart/old/uart.c **** void uart_sendString(const uint8_t * u8SData)
  54:uart/old/uart.c **** {
 137               		.loc 1 54 0
 138               		.cfi_startproc
 139               	.LVL5:
 140 005e CF93      		push r28
 141               	.LCFI0:
 142               		.cfi_def_cfa_offset 3
 143               		.cfi_offset 28, -2
 144 0060 DF93      		push r29
 145               	.LCFI1:
 146               		.cfi_def_cfa_offset 4
 147               		.cfi_offset 29, -3
 148               	/* prologue: function */
 149               	/* frame size = 0 */
 150               	/* stack size = 2 */
 151               	.L__stack_usage = 2
 152 0062 EC01      		movw r28,r24
 153               	.LVL6:
 154               	.L10:
  55:uart/old/uart.c **** 	while(*u8SData){
 155               		.loc 1 55 0
 156 0064 8991      		ld r24,Y+
 157               	.LVL7:
 158 0066 8823      		tst r24
 159 0068 01F0      		breq .L12
 160               	.LVL8:
  56:uart/old/uart.c **** 		uart_send_u8(*u8SData++);
 161               		.loc 1 56 0
 162 006a 0E94 0000 		call uart_send_u8
 163               	.LVL9:
 164 006e 00C0      		rjmp .L10
 165               	.LVL10:
 166               	.L12:
  57:uart/old/uart.c **** 	}
  58:uart/old/uart.c **** 	uart_send_u8('\0');
 167               		.loc 1 58 0
 168 0070 0E94 0000 		call uart_send_u8
 169               	.LVL11:
  59:uart/old/uart.c **** 	uart_send_u8('\n');
 170               		.loc 1 59 0
 171 0074 8AE0      		ldi r24,lo8(10)
 172               	/* epilogue start */
  60:uart/old/uart.c **** }
 173               		.loc 1 60 0
 174 0076 DF91      		pop r29
 175 0078 CF91      		pop r28
 176               	.LVL12:
  59:uart/old/uart.c **** 	uart_send_u8('\n');
 177               		.loc 1 59 0
 178 007a 0C94 0000 		jmp uart_send_u8
 179               	.LVL13:
 180               		.cfi_endproc
 181               	.LFE9:
 183               	.global	uart_send_hex
 185               	uart_send_hex:
 186               	.LFB10:
  61:uart/old/uart.c **** 
  62:uart/old/uart.c **** void  uart_send_hex(uint8_t u8data)
  63:uart/old/uart.c **** {
 187               		.loc 1 63 0
 188               		.cfi_startproc
 189               	.LVL14:
 190 007e CF93      		push r28
 191               	.LCFI2:
 192               		.cfi_def_cfa_offset 3
 193               		.cfi_offset 28, -2
 194               	/* prologue: function */
 195               	/* frame size = 0 */
 196               	/* stack size = 1 */
 197               	.L__stack_usage = 1
 198 0080 C82F      		mov r28,r24
 199               	.LVL15:
  64:uart/old/uart.c ****     unsigned char i,temp;
  65:uart/old/uart.c ****      
  66:uart/old/uart.c ****     for (i=0; i<2; i++)
  67:uart/old/uart.c ****     {
  68:uart/old/uart.c ****         temp = (u8data & 0xF0)>>4;
 200               		.loc 1 68 0
 201 0082 8295      		swap r24
 202               	.LVL16:
 203 0084 8F70      		andi r24,lo8(15)
 204               	.LVL17:
  69:uart/old/uart.c ****         if ( temp <= 9)
 205               		.loc 1 69 0
 206 0086 8A30      		cpi r24,lo8(10)
 207 0088 00F0      		brlo .L14
  70:uart/old/uart.c ****             uart_send_u8( '0' + temp);
  71:uart/old/uart.c ****         else
  72:uart/old/uart.c ****             uart_send_u8(  'A' + temp - 10);
 208               		.loc 1 72 0
 209 008a 895C      		subi r24,lo8(-(55))
 210               	.LVL18:
 211 008c 00C0      		rjmp .L17
 212               	.LVL19:
 213               	.L14:
  70:uart/old/uart.c ****             uart_send_u8( '0' + temp);
 214               		.loc 1 70 0
 215 008e 805D      		subi r24,lo8(-(48))
 216               	.LVL20:
 217               	.L17:
 218 0090 0E94 0000 		call uart_send_u8
 219               	.LVL21:
  68:uart/old/uart.c ****         if ( temp <= 9)
 220               		.loc 1 68 0
 221 0094 8C2F      		mov r24,r28
 222 0096 8F70      		andi r24,lo8(15)
 223               	.LVL22:
  69:uart/old/uart.c ****         if ( temp <= 9)
 224               		.loc 1 69 0
 225 0098 8A30      		cpi r24,lo8(10)
 226 009a 00F4      		brsh .L16
  70:uart/old/uart.c ****             uart_send_u8( '0' + temp);
 227               		.loc 1 70 0
 228 009c 805D      		subi r24,lo8(-(48))
 229               	.LVL23:
 230 009e 00C0      		rjmp .L18
 231               	.LVL24:
 232               	.L16:
 233               		.loc 1 72 0
 234 00a0 895C      		subi r24,lo8(-(55))
 235               	.LVL25:
 236               	.L18:
 237               	/* epilogue start */
  73:uart/old/uart.c ****         u8data = u8data << 4;    
  74:uart/old/uart.c ****      }   
  75:uart/old/uart.c **** }
 238               		.loc 1 75 0
 239 00a2 CF91      		pop r28
 240               	.LVL26:
  72:uart/old/uart.c ****         u8data = u8data << 4;    
 241               		.loc 1 72 0
 242 00a4 0C94 0000 		jmp uart_send_u8
 243               	.LVL27:
 244               		.cfi_endproc
 245               	.LFE10:
 247               	.global	uart_sendString_hex
 249               	uart_sendString_hex:
 250               	.LFB11:
  76:uart/old/uart.c **** 
  77:uart/old/uart.c **** void uart_sendString_hex(const uint8_t * u8SData)
  78:uart/old/uart.c **** {
 251               		.loc 1 78 0
 252               		.cfi_startproc
 253               	.LVL28:
 254 00a8 CF93      		push r28
 255               	.LCFI3:
 256               		.cfi_def_cfa_offset 3
 257               		.cfi_offset 28, -2
 258 00aa DF93      		push r29
 259               	.LCFI4:
 260               		.cfi_def_cfa_offset 4
 261               		.cfi_offset 29, -3
 262               	/* prologue: function */
 263               	/* frame size = 0 */
 264               	/* stack size = 2 */
 265               	.L__stack_usage = 2
 266 00ac EC01      		movw r28,r24
 267               	.LVL29:
 268               	.L20:
  79:uart/old/uart.c ****    unsigned int i=0;
  80:uart/old/uart.c ****    while (u8SData[i] != '\x0') 
 269               		.loc 1 80 0
 270 00ae 8991      		ld r24,Y+
 271               	.LVL30:
 272 00b0 8823      		tst r24
 273 00b2 01F0      		breq .L22
 274               	.LVL31:
  81:uart/old/uart.c ****    {
  82:uart/old/uart.c ****         uart_send_hex(u8SData[i++]);
 275               		.loc 1 82 0
 276 00b4 0E94 0000 		call uart_send_hex
 277               	.LVL32:
  83:uart/old/uart.c ****         uart_send_u8(' ');
 278               		.loc 1 83 0
 279 00b8 80E2      		ldi r24,lo8(32)
 280 00ba 0E94 0000 		call uart_send_u8
 281               	.LVL33:
 282 00be 00C0      		rjmp .L20
 283               	.LVL34:
 284               	.L22:
 285               	/* epilogue start */
  84:uart/old/uart.c ****     };
  85:uart/old/uart.c **** }
 286               		.loc 1 85 0
 287 00c0 DF91      		pop r29
 288 00c2 CF91      		pop r28
 289               	.LVL35:
 290 00c4 0895      		ret
 291               		.cfi_endproc
 292               	.LFE11:
 294               	.global	copy_command
 296               	copy_command:
 297               	.LFB13:
  86:uart/old/uart.c **** 
  87:uart/old/uart.c **** /******************************************************/
  88:uart/old/uart.c **** 
  89:uart/old/uart.c **** #ifdef INTE
  90:uart/old/uart.c **** ISR(USART_RXC_vect)
  91:uart/old/uart.c **** {
  92:uart/old/uart.c **** 	volatile char data;
  93:uart/old/uart.c **** 	
  94:uart/old/uart.c **** 	data = UDR;
  95:uart/old/uart.c **** 	//FIXME: if(gu8Command_ready == 0)
  96:uart/old/uart.c **** 	gu8Main_buf[gu8Buf_idx++] = data;
  97:uart/old/uart.c **** 	//FIXME : add gu8Command_ready == 0 to the test condition
  98:uart/old/uart.c **** 	if(data == TERMINATOR || gu8Buf_idx >= MAX_UART_BUF_SIZE - 1){
  99:uart/old/uart.c **** 		gu8Main_buf[gu8Buf_idx-1] = '\0';
 100:uart/old/uart.c **** 		copy_command();
 101:uart/old/uart.c ****         // it can be replaced with a queue
 102:uart/old/uart.c **** 		gu8Buf_idx = 0;
 103:uart/old/uart.c **** 		gu8Command_ready = 1;
 104:uart/old/uart.c **** 	}
 105:uart/old/uart.c **** }
 106:uart/old/uart.c **** 
 107:uart/old/uart.c **** void copy_command(void) 
 108:uart/old/uart.c **** {
 298               		.loc 1 108 0
 299               		.cfi_startproc
 300               	/* prologue: function */
 301               	/* frame size = 0 */
 302               	/* stack size = 0 */
 303               	.L__stack_usage = 0
 304               	.LVL36:
 305               	.LBB7:
 306               	.LBB8:
 307               	.LBB9:
 308               		.file 2 "/usr/lib/avr/include/util/atomic.h"
   1:/usr/lib/avr/include/util/atomic.h **** /* Copyright (c) 2007 Dean Camera
   2:/usr/lib/avr/include/util/atomic.h ****    All rights reserved.
   3:/usr/lib/avr/include/util/atomic.h **** 
   4:/usr/lib/avr/include/util/atomic.h ****    Redistribution and use in source and binary forms, with or without
   5:/usr/lib/avr/include/util/atomic.h ****    modification, are permitted provided that the following conditions are met:
   6:/usr/lib/avr/include/util/atomic.h **** 
   7:/usr/lib/avr/include/util/atomic.h ****    * Redistributions of source code must retain the above copyright
   8:/usr/lib/avr/include/util/atomic.h ****      notice, this list of conditions and the following disclaimer.
   9:/usr/lib/avr/include/util/atomic.h **** 
  10:/usr/lib/avr/include/util/atomic.h ****    * Redistributions in binary form must reproduce the above copyright
  11:/usr/lib/avr/include/util/atomic.h ****      notice, this list of conditions and the following disclaimer in
  12:/usr/lib/avr/include/util/atomic.h ****      the documentation and/or other materials provided with the
  13:/usr/lib/avr/include/util/atomic.h ****      distribution.
  14:/usr/lib/avr/include/util/atomic.h **** 
  15:/usr/lib/avr/include/util/atomic.h ****    * Neither the name of the copyright holders nor the names of
  16:/usr/lib/avr/include/util/atomic.h ****      contributors may be used to endorse or promote products derived
  17:/usr/lib/avr/include/util/atomic.h ****      from this software without specific prior written permission.
  18:/usr/lib/avr/include/util/atomic.h **** 
  19:/usr/lib/avr/include/util/atomic.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  20:/usr/lib/avr/include/util/atomic.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  21:/usr/lib/avr/include/util/atomic.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  22:/usr/lib/avr/include/util/atomic.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  23:/usr/lib/avr/include/util/atomic.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  24:/usr/lib/avr/include/util/atomic.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  25:/usr/lib/avr/include/util/atomic.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  26:/usr/lib/avr/include/util/atomic.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  27:/usr/lib/avr/include/util/atomic.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  28:/usr/lib/avr/include/util/atomic.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  29:/usr/lib/avr/include/util/atomic.h ****   POSSIBILITY OF SUCH DAMAGE.
  30:/usr/lib/avr/include/util/atomic.h **** */
  31:/usr/lib/avr/include/util/atomic.h **** 
  32:/usr/lib/avr/include/util/atomic.h **** /* $Id$ */
  33:/usr/lib/avr/include/util/atomic.h **** 
  34:/usr/lib/avr/include/util/atomic.h **** #ifndef _UTIL_ATOMIC_H_
  35:/usr/lib/avr/include/util/atomic.h **** #define _UTIL_ATOMIC_H_ 1
  36:/usr/lib/avr/include/util/atomic.h **** 
  37:/usr/lib/avr/include/util/atomic.h **** #include <avr/io.h>
  38:/usr/lib/avr/include/util/atomic.h **** #include <avr/interrupt.h>
  39:/usr/lib/avr/include/util/atomic.h **** 
  40:/usr/lib/avr/include/util/atomic.h **** #if !defined(__DOXYGEN__)
  41:/usr/lib/avr/include/util/atomic.h **** /* Internal helper functions. */
  42:/usr/lib/avr/include/util/atomic.h **** static __inline__ uint8_t __iSeiRetVal(void)
  43:/usr/lib/avr/include/util/atomic.h **** {
  44:/usr/lib/avr/include/util/atomic.h ****     sei();
  45:/usr/lib/avr/include/util/atomic.h ****     return 1;
  46:/usr/lib/avr/include/util/atomic.h **** }
  47:/usr/lib/avr/include/util/atomic.h **** 
  48:/usr/lib/avr/include/util/atomic.h **** static __inline__ uint8_t __iCliRetVal(void)
  49:/usr/lib/avr/include/util/atomic.h **** {
  50:/usr/lib/avr/include/util/atomic.h ****     cli();
 309               		.loc 2 50 0
 310               	/* #APP */
 311               	 ;  50 "/usr/lib/avr/include/util/atomic.h" 1
 312 00c6 F894      		cli
 313               	 ;  0 "" 2
 314               	.LVL37:
 315               	/* #NOAPP */
 316               	.LBE9:
 317               	.LBE8:
 109:uart/old/uart.c ****     // The USART might interrupt this - don't let that happen!
 110:uart/old/uart.c ****     ATOMIC_BLOCK(ATOMIC_FORCEON)
 111:uart/old/uart.c ****     {
 112:uart/old/uart.c ****         // Copy the contents of main buff into aux buff
 113:uart/old/uart.c ****         memcpy( (void *)&gu8Aux_buf[0],(void *) &gu8Main_buf[0], MAX_UART_BUF_SIZE);
 318               		.loc 1 113 0
 319 00c8 84E1      		ldi r24,lo8(20)
 320 00ca E0E0      		ldi r30,lo8(gu8Main_buf)
 321 00cc F0E0      		ldi r31,hi8(gu8Main_buf)
 322 00ce A0E0      		ldi r26,lo8(gu8Aux_buf)
 323 00d0 B0E0      		ldi r27,hi8(gu8Aux_buf)
 324               		0:
 325 00d2 0190      		ld r0,Z+
 326 00d4 0D92      		st X+,r0
 327 00d6 8A95      		dec r24
 328 00d8 01F4      		brne 0b
 114:uart/old/uart.c **** 
 115:uart/old/uart.c ****         // Now clear main buff, the USART can reuse it now
 116:uart/old/uart.c ****         // memset((void *) &gu8Main_buf[0], 0, MAX_UART_BUF_SIZE);
 117:uart/old/uart.c **** 
 118:uart/old/uart.c ****         gu8Buf_size = gu8Buf_idx;
 329               		.loc 1 118 0
 330 00da 8091 0000 		lds r24,gu8Buf_idx
 331 00de 8093 0000 		sts gu8Buf_size,r24
 332               	.LVL38:
 333               	.LBB10:
 334               	.LBB11:
  51:/usr/lib/avr/include/util/atomic.h ****     return 1;
  52:/usr/lib/avr/include/util/atomic.h **** }
  53:/usr/lib/avr/include/util/atomic.h **** 
  54:/usr/lib/avr/include/util/atomic.h **** static __inline__ void __iSeiParam(const uint8_t *__s)
  55:/usr/lib/avr/include/util/atomic.h **** {
  56:/usr/lib/avr/include/util/atomic.h ****     sei();
 335               		.loc 2 56 0
 336               	/* #APP */
 337               	 ;  56 "/usr/lib/avr/include/util/atomic.h" 1
 338 00e2 7894      		sei
 339               	 ;  0 "" 2
  57:/usr/lib/avr/include/util/atomic.h ****     __asm__ volatile ("" ::: "memory");
 340               		.loc 2 57 0
 341               	/* #NOAPP */
 342 00e4 0895      		ret
 343               	.LBE11:
 344               	.LBE10:
 345               	.LBE7:
 346               		.cfi_endproc
 347               	.LFE13:
 349               	.global	__vector_11
 351               	__vector_11:
 352               	.LFB12:
  91:uart/old/uart.c **** 	volatile char data;
 353               		.loc 1 91 0
 354               		.cfi_startproc
 355 00e6 1F92      		push r1
 356               	.LCFI5:
 357               		.cfi_def_cfa_offset 3
 358               		.cfi_offset 1, -2
 359 00e8 0F92      		push r0
 360               	.LCFI6:
 361               		.cfi_def_cfa_offset 4
 362               		.cfi_offset 0, -3
 363 00ea 0FB6      		in r0,__SREG__
 364 00ec 0F92      		push r0
 365 00ee 1124      		clr __zero_reg__
 366 00f0 2F93      		push r18
 367               	.LCFI7:
 368               		.cfi_def_cfa_offset 5
 369               		.cfi_offset 18, -4
 370 00f2 3F93      		push r19
 371               	.LCFI8:
 372               		.cfi_def_cfa_offset 6
 373               		.cfi_offset 19, -5
 374 00f4 4F93      		push r20
 375               	.LCFI9:
 376               		.cfi_def_cfa_offset 7
 377               		.cfi_offset 20, -6
 378 00f6 5F93      		push r21
 379               	.LCFI10:
 380               		.cfi_def_cfa_offset 8
 381               		.cfi_offset 21, -7
 382 00f8 6F93      		push r22
 383               	.LCFI11:
 384               		.cfi_def_cfa_offset 9
 385               		.cfi_offset 22, -8
 386 00fa 7F93      		push r23
 387               	.LCFI12:
 388               		.cfi_def_cfa_offset 10
 389               		.cfi_offset 23, -9
 390 00fc 8F93      		push r24
 391               	.LCFI13:
 392               		.cfi_def_cfa_offset 11
 393               		.cfi_offset 24, -10
 394 00fe 9F93      		push r25
 395               	.LCFI14:
 396               		.cfi_def_cfa_offset 12
 397               		.cfi_offset 25, -11
 398 0100 AF93      		push r26
 399               	.LCFI15:
 400               		.cfi_def_cfa_offset 13
 401               		.cfi_offset 26, -12
 402 0102 BF93      		push r27
 403               	.LCFI16:
 404               		.cfi_def_cfa_offset 14
 405               		.cfi_offset 27, -13
 406 0104 EF93      		push r30
 407               	.LCFI17:
 408               		.cfi_def_cfa_offset 15
 409               		.cfi_offset 30, -14
 410 0106 FF93      		push r31
 411               	.LCFI18:
 412               		.cfi_def_cfa_offset 16
 413               		.cfi_offset 31, -15
 414 0108 CF93      		push r28
 415               	.LCFI19:
 416               		.cfi_def_cfa_offset 17
 417               		.cfi_offset 28, -16
 418 010a DF93      		push r29
 419               	.LCFI20:
 420               		.cfi_def_cfa_offset 18
 421               		.cfi_offset 29, -17
 422 010c 1F92      		push __zero_reg__
 423               	.LCFI21:
 424               		.cfi_def_cfa_offset 19
 425 010e CDB7      		in r28,__SP_L__
 426 0110 DEB7      		in r29,__SP_H__
 427               	.LCFI22:
 428               		.cfi_def_cfa_register 28
 429               	/* prologue: Signal */
 430               	/* frame size = 1 */
 431               	/* stack size = 18 */
 432               	.L__stack_usage = 18
  94:uart/old/uart.c **** 	//FIXME: if(gu8Command_ready == 0)
 433               		.loc 1 94 0
 434 0112 8CB1      		in r24,0xc
 435 0114 8983      		std Y+1,r24
  96:uart/old/uart.c **** 	//FIXME : add gu8Command_ready == 0 to the test condition
 436               		.loc 1 96 0
 437 0116 E091 0000 		lds r30,gu8Buf_idx
 438 011a 81E0      		ldi r24,lo8(1)
 439 011c 8E0F      		add r24,r30
 440 011e 8093 0000 		sts gu8Buf_idx,r24
 441 0122 F0E0      		ldi r31,0
 442 0124 8981      		ldd r24,Y+1
 443 0126 E050      		subi r30,lo8(-(gu8Main_buf))
 444 0128 F040      		sbci r31,hi8(-(gu8Main_buf))
 445 012a 8083      		st Z,r24
  98:uart/old/uart.c **** 		gu8Main_buf[gu8Buf_idx-1] = '\0';
 446               		.loc 1 98 0
 447 012c 8981      		ldd r24,Y+1
 448 012e 8A30      		cpi r24,lo8(10)
 449 0130 01F0      		breq .L25
  98:uart/old/uart.c **** 		gu8Main_buf[gu8Buf_idx-1] = '\0';
 450               		.loc 1 98 0 is_stmt 0 discriminator 1
 451 0132 8091 0000 		lds r24,gu8Buf_idx
 452 0136 8331      		cpi r24,lo8(19)
 453 0138 00F0      		brlo .L24
 454               	.L25:
  99:uart/old/uart.c **** 		copy_command();
 455               		.loc 1 99 0 is_stmt 1
 456 013a E091 0000 		lds r30,gu8Buf_idx
 457 013e F0E0      		ldi r31,0
 458 0140 E050      		subi r30,lo8(-(gu8Main_buf-1))
 459 0142 F040      		sbci r31,hi8(-(gu8Main_buf-1))
 460 0144 1082      		st Z,__zero_reg__
 100:uart/old/uart.c ****         // it can be replaced with a queue
 461               		.loc 1 100 0
 462 0146 0E94 0000 		call copy_command
 463               	.LVL39:
 102:uart/old/uart.c **** 		gu8Command_ready = 1;
 464               		.loc 1 102 0
 465 014a 1092 0000 		sts gu8Buf_idx,__zero_reg__
 103:uart/old/uart.c **** 	}
 466               		.loc 1 103 0
 467 014e 81E0      		ldi r24,lo8(1)
 468 0150 8093 0000 		sts gu8Command_ready,r24
 469               	.L24:
 470               	/* epilogue start */
 105:uart/old/uart.c **** 
 471               		.loc 1 105 0
 472 0154 0F90      		pop __tmp_reg__
 473 0156 DF91      		pop r29
 474 0158 CF91      		pop r28
 475 015a FF91      		pop r31
 476 015c EF91      		pop r30
 477 015e BF91      		pop r27
 478 0160 AF91      		pop r26
 479 0162 9F91      		pop r25
 480 0164 8F91      		pop r24
 481 0166 7F91      		pop r23
 482 0168 6F91      		pop r22
 483 016a 5F91      		pop r21
 484 016c 4F91      		pop r20
 485 016e 3F91      		pop r19
 486 0170 2F91      		pop r18
 487 0172 0F90      		pop r0
 488 0174 0FBE      		out __SREG__,r0
 489 0176 0F90      		pop r0
 490 0178 1F90      		pop r1
 491 017a 1895      		reti
 492               		.cfi_endproc
 493               	.LFE12:
 495               	.global	gu8Command_ready
 496               		.section .bss
 499               	gu8Command_ready:
 500 0000 00        		.zero	1
 501               	.global	gu8Aux_buf
 504               	gu8Aux_buf:
 505 0001 0000 0000 		.zero	20
 505      0000 0000 
 505      0000 0000 
 505      0000 0000 
 505      0000 0000 
 506               	.global	gu8Main_buf
 509               	gu8Main_buf:
 510 0015 0000 0000 		.zero	20
 510      0000 0000 
 510      0000 0000 
 510      0000 0000 
 510      0000 0000 
 511               	.global	gu8Buf_idx
 514               	gu8Buf_idx:
 515 0029 00        		.zero	1
 516               	.global	gu8Buf_size
 519               	gu8Buf_size:
 520 002a 00        		.zero	1
 521               		.text
 522               	.Letext0:
 523               		.file 3 "/usr/lib/avr/include/stdint.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 uart.c
     /tmp/cc0jjooT.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cc0jjooT.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cc0jjooT.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cc0jjooT.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cc0jjooT.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cc0jjooT.s:12     .text:0000000000000000 uart_init
     /tmp/cc0jjooT.s:74     .text:0000000000000042 uart_send_ready
     /tmp/cc0jjooT.s:94     .text:000000000000004c uart_receive_ready
     /tmp/cc0jjooT.s:114    .text:0000000000000056 uart_send_u8
     /tmp/cc0jjooT.s:135    .text:000000000000005e uart_sendString
     /tmp/cc0jjooT.s:185    .text:000000000000007e uart_send_hex
     /tmp/cc0jjooT.s:249    .text:00000000000000a8 uart_sendString_hex
     /tmp/cc0jjooT.s:296    .text:00000000000000c6 copy_command
     /tmp/cc0jjooT.s:509    .bss:0000000000000015 gu8Main_buf
     /tmp/cc0jjooT.s:504    .bss:0000000000000001 gu8Aux_buf
     /tmp/cc0jjooT.s:514    .bss:0000000000000029 gu8Buf_idx
     /tmp/cc0jjooT.s:519    .bss:000000000000002a gu8Buf_size
     /tmp/cc0jjooT.s:351    .text:00000000000000e6 __vector_11
     /tmp/cc0jjooT.s:499    .bss:0000000000000000 gu8Command_ready

UNDEFINED SYMBOLS
__udivmodsi4
__do_clear_bss
